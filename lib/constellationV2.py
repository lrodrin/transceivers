import matplotlib.pyplot as plt
import numpy as np
import scipy.special as spec


def Format(constellation, bn):
    if constellation == "PAM":
        if bn == 0:
            mapped = 0
            bitmap = 0
        if bn == 1:
            mapped = np.array([-1, 1]).reshape(-1, 1)
            bitmap = np.array([0, 1])
        elif bn == 2:
            bitmap = np.array([[0, 0], [0, 1], [1, 1], [1, 0]])
            mapped = np.sqrt(1. / 5.) * np.array([-3, -1, 1, 3]).reshape(-1, 1)
        elif bn == 3:
            bitmap = np.array([[0, 0, 0], [0, 0, 1], [0, 1, 1], [0, 1, 0], [1, 1, 0], [1, 1, 1], [1, 0, 1], [1, 0, 0]])
            mapped = np.sqrt(1. / 21.) * np.array([-7, -5, -3, -1, 1, 3, 5, 7]).reshape(-1, 1)
        elif bn == 4:
            # bitmap=np.array([[0,0,0,0], [0,0,1,0],[0,1,1,0],[0,1,0,0],[0,1,0,1],[0,0,0,1],[0,0,1,1],[0,1,1,1],[1,1,
            # 1,1],[1,0,1,1],[1,0,0,1],[1,1,0,1],[1,1,0,0],[1,1,1,0],[1,0,1,0],[1,0,0,0]])
            bitmap = np.array(
                [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 1, 0, 1],
                 [0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 0, 1], [1, 1, 0, 0], [1, 1, 1, 0], [1, 0, 1, 0], [1, 0, 1, 1],
                 [1, 0, 0, 1], [1, 0, 0, 0]])
            mapped = np.sqrt(1. / 85.) * np.array(
                [-15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15]).reshape(-1, 1)
        elif bn == 5:
            bitmap = np.array(
                [[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 1],
                 [0, 0, 1, 0, 1], [0, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1, 0, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 0],
                 [0, 1, 0, 1, 0], [0, 1, 0, 1, 1], [0, 1, 0, 0, 1], [0, 1, 0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 0, 0, 1],
                 [1, 1, 0, 1, 1], [1, 1, 0, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 0, 0],
                 [1, 0, 1, 0, 0], [1, 0, 1, 0, 1], [1, 0, 1, 1, 1], [1, 0, 1, 1, 0], [1, 0, 0, 1, 0], [1, 0, 0, 1, 1],
                 [1, 0, 0, 0, 1], [1, 0, 0, 0, 0], ])
            mapped = np.sqrt(1. / 341.) * np.array(
                [-31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15,
                 17, 19, 21, 23, 25, 27, 29, 31]).reshape(-1, 1)

    if constellation == "QAM":
        if bn == 0:
            mapped = 0
            bitmap = 0
        if bn == 1:
            mapped = np.array([-1, 1]).reshape(-1, 1)
            bitmap = np.array([0, 1])
        elif bn == 2:
            bitmap = np.array([[0, 0], [0, 1], [1, 1], [1, 0]])
            mapped = np.sqrt(1. / 2.) * np.array([-1 - 1j, -1 + 1j, 1 + 1j, 1 - 1j], complex)
        elif bn == 3:
            bitmap = np.array([[0, 0, 0], [0, 0, 1], [0, 1, 1], [0, 1, 0], [1, 1, 0], [1, 0, 0], [1, 0, 1], [1, 1, 1]])
            # mapped=np.sqrt(1./0.875)*np.array([1, np.exp(1j*2.*np.pi/7.), np.exp(1j*4.*np.pi/7.),
            # np.exp(1j*6.*np.pi/7.),np.exp(1j*8.*np.pi/7.), np.exp(1j*10.*np.pi/7.), np.exp(1j*12.*np.pi/7.),
            # 0]) #circular 8QAM enhanced performance for flexi optical networks the best performance (LMS eq)
            mapped = np.sqrt(1. / 5.5) * np.array([-3, -1 + 1j, 3 * 1j, -1 - 1j, 1 - 1j, -3 * 1j, 1 + 1j, 3],
                                                  complex)  # 8QAM(4,4) PAM-PSK constellation
            # mapped=np.sqrt(1./0.636)*np.array([1j,3*1j,1-1j,1+1j,-3*1j,-1+1j,-1-1j,-1j]) #8QAM Sadjadpour's
            # constellation
        # mapped=np.sqrt(1./6.)*np.array([1-1j,-1-1j,-3-1j,3-1j,3+1j,1+1j,-1+1j,-3+1j]) #rectangular Agrawal
        # mapped=np.sqrt(1./6.)*np.array([-1-1j,-1,-1+1j,-1j,1-1j,1,1+1j,1j]) #rectangular
        elif bn == 4:
            bitmap = np.array(
                [[1, 0, 0, 0], [1, 0, 0, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 1, 1, 0],
                 [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1],
                 [0, 1, 1, 0], [0, 1, 1, 1]])
            mapped = np.sqrt(1. / 10.) * np.array(
                [3 + 3 * 1j, 3 + 1j, 1 + 3 * 1j, 1 + 1j, 3 - 3 * 1j, 3 - 1j, 1 - 3 * 1j, 1 - 1j, -3 + 3 * 1j, -3 + 1j,
                 -1 + 3 * 1j, -1 + 1j, -3 - 3 * 1j, -3 - 1j, -1 - 3 * 1j, -1 - 1j], complex)
        elif bn == 5:
            bitmap = np.array(
                [[1, 0, 1, 0, 0], [1, 0, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 1],
                 [0, 1, 1, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 1], [1, 0, 1, 1, 1], [1, 0, 1, 0, 1], [0, 0, 1, 0, 1],
                 [0, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1, 0, 1], [1, 1, 1, 0, 1], [1, 1, 0, 0, 1], [0, 1, 0, 0, 1],
                 [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 1, 1],
                 [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 1], [1, 1, 0, 1, 1], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0],
                 [1, 0, 0, 1, 0], [1, 0, 0, 0, 0]])
            mapped = np.sqrt(1. / 20.) * np.array(
                [-5 + 3 * 1j, -5 + 1j, -5 - 1j, -5 - 3 * 1j, -3 - 5 * 1j, -3 - 3 * 1j, -3 - 1j, -3 + 1j, -3 + 3 * 1j,
                 -3 + 5 * 1j, -1 + 5 * 1j, -1 + 3 * 1j, -1 + 1j, -1 - 1j, -1 - 3 * 1j, -1 - 5 * 1j, 1 - 5 * 1j,
                 1 - 3 * 1j, 1 - 1j, 1 + 1j, 1 + 3 * 1j, 1 + 5 * 1j, 3 + 5 * 1j, 3 + 3 * 1j, 3 + 1j, 3 - 1j, 3 - 3 * 1j,
                 3 - 5 * 1j, 5 - 3 * 1j, 5 - 1j, 5 + 1j, 5 + 3 * 1j], complex)
        elif bn == 6:
            bitmap = np.array(
                [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0],
                 [0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1],
                 [0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1],
                 [0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0],
                 [0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0],
                 [0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1],
                 [0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1],
                 [1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0],
                 [1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0],
                 [1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1],
                 [1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1],
                 [1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0],
                 [1, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0]])
            QAM16 = np.array(
                [-3 - 3 * 1j, -1 - 3 * 1j, 1 - 3 * 1j, 3 - 3 * 1j, 3 - 1j, 1 - 1j, -1 - 1j, -3 - 1j, -3 + 3 * 1j,
                 -1 + 3 * 1j, 1 + 3 * 1j, 3 + 3 * 1j, 3 + 1j, 1 + 1j, -1 + 1j, -3 + 1j], complex)
            mapped = np.sqrt(1. / 42.) * np.r_[
                QAM16 + (4 + 4 * 1j), QAM16 + (-4 + 4 * 1j), QAM16 + (-4 - 4 * 1j), QAM16 + (4 - 4 * 1j)]
        elif bn == 7:
            bitmap = np.array(
                [[1, 0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0],
                 [1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0],
                 [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0],
                 [1, 1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0],
                 [1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0],
                 [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0],
                 [0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0],
                 [1, 1, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0],
                 [1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0],
                 [1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0, 0],
                 [1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0],
                 [1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0],
                 [1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0],
                 [1, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0],
                 [1, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0],
                 [0, 1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0],
                 [0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0],
                 [0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 1, 1, 0, 0],
                 [0, 1, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0],
                 [0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0],
                 [0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0],
                 [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0],
                 [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0],
                 [0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1],
                 [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1],
                 [1, 0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1],
                 [1, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1],
                 [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1, 0],
                 [0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0],
                 [1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0],
                 [1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0]])
            QAM4 = np.array([-1 - 1j, -1 + 1j, 1 + 1j, 1 - 1j], complex)
            QAM16 = np.array(
                [-3 - 3 * 1j, -1 - 3 * 1j, 1 - 3 * 1j, 3 - 3 * 1j, 3 - 1j, 1 - 1j, -1 - 1j, -3 - 1j, -3 + 3 * 1j,
                 -1 + 3 * 1j, 1 + 3 * 1j, 3 + 3 * 1j, 3 + 1j, 1 + 1j, -1 + 1j, -3 + 1j], complex)
            QAM64 = np.r_[QAM16 + (4 + 4 * 1j), QAM16 + (-4 + 4 * 1j), QAM16 + (-4 - 4 * 1j), QAM16 + (4 - 4 * 1j)]
            mapped = np.sqrt(1. / 82.) * np.r_[
                QAM64 - 4 * 1j, QAM16 + (-4 + 8 * 1j), QAM16 + (4 + 8 * 1j), QAM4 + (10 + 6 * 1j), QAM4 + (
                        10 + 2 * 1j), QAM4 + (10 - 2 * 1j), QAM4 + (10 - 6 * 1j), QAM4 + (-10 + 6 * 1j), QAM4 + (
                        -10 + 2 * 1j), QAM4 + (-10 - 2 * 1j), QAM4 + (-10 - 6 * 1j)]
        elif bn == 8:
            # bitmap64I=np.array([[0,0,1,0,1,0,0,0],[0,0,1,0,1,0,0,1],[0,0,1,0,1,0,1,1],[0,0,1,0,1,0,1,0],[0,0,1,0,1,
            # 1,1,0],[0,0,1,0,1,1,1,1],[0,0,1,0,1,1,0,1],[0,0,1,0,1,1,0,0],[0,0,1,0,0,0,0,0],[0,0,1,0,0,0,0,1],[0,0,
            # 1,0,0,0,1,1],[0,0,1,0,0,0,1,0],[0,0,1,0,0,1,1,0],[0,0,1,0,0,1,1,1],[0,0,1,0,0,1,0,1],[0,0,1,0,0,1,0,0],
            # [0,0,1,1,1,0,1,0],[0,0,1,1,1,0,1,1],[0,0,1,1,1,0,0,1],[0,0,1,1,1,0,0,0],[0,0,1,1,1,1,0,0],[0,0,1,1,1,1,
            # 0,1],[0,0,1,1,1,1,1,1],[0,0,1,1,1,1,1,0],[0,0,1,1,0,0,1,0],[0,0,1,1,0,0,1,1],[0,0,1,1,0,0,0,1],[0,0,1,
            # 1,0,0,0,0],[0,0,1,1,0,1,0,0],[0,0,1,1,0,1,0,1],[0,0,1,1,0,1,1,1],[0,0,1,1,0,1,1,0],[0,0,0,0,0,0,0,0],
            # [0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,1],[0,0,0,0,0,0,1,0],[0,0,0,0,0,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,0,1,
            # 0,1],[0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,1],[0,0,0,0,1,0,1,1],[0,0,0,0,1,0,1,0],[0,0,0,
            # 0,1,1,1,0],[0,0,0,0,1,1,1,1],[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,0,0],[0,0,0,1,0,0,1,0],[0,0,0,1,0,0,1,1],
            # [0,0,0,1,0,0,0,1],[0,0,0,1,0,0,0,0],[0,0,0,1,0,1,0,0],[0,0,0,1,0,1,0,1],[0,0,0,1,0,1,1,1],[0,0,0,1,0,1,
            # 1,0],[0,0,0,1,1,0,1,0],[0,0,0,1,1,0,1,1],[0,0,0,1,1,0,0,1],[0,0,0,1,1,0,0,0],[0,0,0,1,1,1,0,0],[0,0,0,
            # 1,1,1,0,1],[0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,0]]) #64QAM en el I quadrant bitmap64II=np.array([[0,1,1,0,
            # 1,0,0,0],[0,1,1,0,1,0,0,1],[0,1,1,0,1,0,1,1],[0,1,1,0,1,0,1,0],[0,1,1,0,1,1,1,0],[0,1,1,0,1,1,1,1],[0,
            # 1,1,0,1,1,0,1],[0,1,1,0,1,1,0,0],[0,1,1,0,0,0,0,0],[0,1,1,0,0,0,0,1],[0,1,1,0,0,0,1,1],[0,1,1,0,0,0,1,
            # 0],[0,1,1,0,0,1,1,0],[0,1,1,0,0,1,1,1],[0,1,1,0,0,1,0,1],[0,1,1,0,0,1,0,0],[0,1,1,1,1,0,1,0],[0,1,1,1,
            # 1,0,1,1],[0,1,1,1,1,0,0,1],[0,1,1,1,1,0,0,0],[0,1,1,1,1,1,0,0],[0,1,1,1,1,1,0,1],[0,1,1,1,1,1,1,1],[0,
            # 1,1,1,1,1,1,0],[0,1,1,1,0,0,1,0],[0,1,1,1,0,0,1,1],[0,1,1,1,0,0,0,1],[0,1,1,1,0,0,0,0],[0,1,1,1,0,1,0,
            # 0],[0,1,1,1,0,1,0,1],[0,1,1,1,0,1,1,1],[0,1,1,1,0,1,1,0],[0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,1],[0,1,0,0,
            # 0,0,1,1],[0,1,0,0,0,0,1,0],[0,1,0,0,0,1,1,0],[0,1,0,0,0,1,1,1],[0,1,0,0,0,1,0,1],[0,1,0,0,0,1,0,0],[0,
            # 1,0,0,1,0,0,0],[0,1,0,0,1,0,0,1],[0,1,0,0,1,0,1,1],[0,1,0,0,1,0,1,0],[0,1,0,0,1,1,1,0],[0,1,0,0,1,1,1,
            # 1],[0,1,0,0,1,1,0,1],[0,1,0,0,1,1,0,0],[0,1,0,1,0,0,1,0],[0,1,0,1,0,0,1,1],[0,1,0,1,0,0,0,1],[0,1,0,1,
            # 0,0,0,0],[0,1,0,1,0,1,0,0],[0,1,0,1,0,1,0,1],[0,1,0,1,0,1,1,1],[0,1,0,1,0,1,1,0],[0,1,0,1,1,0,1,0],[0,
            # 1,0,1,1,0,1,1],[0,1,0,1,1,0,0,1],[0,1,0,1,1,0,0,0],[0,1,0,1,1,1,0,0],[0,1,0,1,1,1,0,1],[0,1,0,1,1,1,1,
            # 1],[0,1,0,1,1,1,1,0]]) bitmap64III=np.array([[1,1,1,0,1,0,0,0],[1,1,1,0,1,0,0,1],[1,1,1,0,1,0,1,1],[1,
            # 1,1,0,1,0,1,0],[1,1,1,0,1,1,1,0],[1,1,1,0,1,1,1,1],[1,1,1,0,1,1,0,1],[1,1,1,0,1,1,0,0],[1,1,1,0,0,0,0,
            # 0],[1,1,1,0,0,0,0,1],[1,1,1,0,0,0,1,1],[1,1,1,0,0,0,1,0],[1,1,1,0,0,1,1,0],[1,1,1,0,0,1,1,1],[1,1,1,0,
            # 0,1,0,1],[1,1,1,0,0,1,0,0],[1,1,1,1,1,0,1,0],[1,1,1,1,1,0,1,1],[1,1,1,1,1,0,0,1],[1,1,1,1,1,0,0,0],[1,
            # 1,1,1,1,1,0,0],[1,1,1,1,1,1,0,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,0],[1,1,1,1,0,0,1,0],[1,1,1,1,0,0,1,
            # 1],[1,1,1,1,0,0,0,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,1,0,0],[1,1,1,1,0,1,0,1],[1,1,1,1,0,1,1,1],[1,1,1,1,
            # 0,1,1,0],[1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,1],[1,1,0,0,0,0,1,1],[1,1,0,0,0,0,1,0],[1,1,0,0,0,1,1,0],[1,
            # 1,0,0,0,1,1,1],[1,1,0,0,0,1,0,1],[1,1,0,0,0,1,0,0],[1,1,0,0,1,0,0,0],[1,1,0,0,1,0,0,1],[1,1,0,0,1,0,1,
            # 1],[1,1,0,0,1,0,1,0],[1,1,0,0,1,1,1,0],[1,1,0,0,1,1,1,1],[1,1,0,0,1,1,0,1],[1,1,0,0,1,1,0,0],[1,1,0,1,
            # 0,0,1,0],[1,1,0,1,0,0,1,1],[1,1,0,1,0,0,0,1],[1,1,0,1,0,0,0,0],[1,1,0,1,0,1,0,0],[1,1,0,1,0,1,0,1],[1,
            # 1,0,1,0,1,1,1],[1,1,0,1,0,1,1,0],[1,1,0,1,1,0,1,0],[1,1,0,1,1,0,1,1],[1,1,0,1,1,0,0,1],[1,1,0,1,1,0,0,
            # 0],[1,1,0,1,1,1,0,0],[1,1,0,1,1,1,0,1],[1,1,0,1,1,1,1,1],[1,1,0,1,1,1,1,0]]) bitmap64IV=np.array([[1,0,
            # 1,0,1,0,0,0],[1,0,1,0,1,0,0,1],[1,0,1,0,1,0,1,1],[1,0,1,0,1,0,1,0],[1,0,1,0,1,1,1,0],[1,0,1,0,1,1,1,1],
            # [1,0,1,0,1,1,0,1],[1,0,1,0,1,1,0,0],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,1],[1,0,1,0,0,0,1,1],[1,0,1,0,0,0,
            # 1,0],[1,0,1,0,0,1,1,0],[1,0,1,0,0,1,1,1],[1,0,1,0,0,1,0,1],[1,0,1,0,0,1,0,0],[1,0,1,1,1,0,1,0],[1,0,1,
            # 1,1,0,1,1],[1,0,1,1,1,0,0,1],[1,0,1,1,1,0,0,0],[1,0,1,1,1,1,0,0],[1,0,1,1,1,1,0,1],[1,0,1,1,1,1,1,1],
            # [1,0,1,1,1,1,1,0],[1,0,1,1,0,0,1,0],[1,0,1,1,0,0,1,1],[1,0,1,1,0,0,0,1],[1,0,1,1,0,0,0,0],[1,0,1,1,0,1,
            # 0,0],[1,0,1,1,0,1,0,1],[1,0,1,1,0,1,1,1],[1,0,1,1,0,1,1,0],[1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,1],[1,0,0,
            # 0,0,0,1,1],[1,0,0,0,0,0,1,0],[1,0,0,0,0,1,1,0],[1,0,0,0,0,1,1,1],[1,0,0,0,0,1,0,1],[1,0,0,0,0,1,0,0],
            # [1,0,0,0,1,0,0,0],[1,0,0,0,1,0,0,1],[1,0,0,0,1,0,1,1],[1,0,0,0,1,0,1,0],[1,0,0,0,1,1,1,0],[1,0,0,0,1,1,
            # 1,1],[1,0,0,0,1,1,0,1],[1,0,0,0,1,1,0,0],[1,0,0,1,0,0,1,0],[1,0,0,1,0,0,1,1],[1,0,0,1,0,0,0,1],[1,0,0,
            # 1,0,0,0,0],[1,0,0,1,0,1,0,0],[1,0,0,1,0,1,0,1],[1,0,0,1,0,1,1,1],[1,0,0,1,0,1,1,0],[1,0,0,1,1,0,1,0],
            # [1,0,0,1,1,0,1,1],[1,0,0,1,1,0,0,1],[1,0,0,1,1,0,0,0],[1,0,0,1,1,1,0,0],[1,0,0,1,1,1,0,1],[1,0,0,1,1,1,
            # 1,1],[1,0,0,1,1,1,1,0]])
            bitmap64I = np.array(
                [[0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0],
                 [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 0],
                 [0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0],
                 [0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 0],
                 [0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0],
                 [0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0],
                 [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0],
                 [0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0],
                 [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0],
                 [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0],
                 [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0],
                 [0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0],
                 [0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0],
                 [0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0],
                 [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1],
                 [0, 0, 0, 1, 1, 1, 1, 0]])  # 64QAM en el I quadrant
            bitmap64II = np.array(
                [[0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0],
                 [0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0],
                 [0, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0],
                 [0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0],
                 [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0],
                 [0, 1, 1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0],
                 [0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0],
                 [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0],
                 [0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0],
                 [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0],
                 [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0],
                 [0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0],
                 [0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0],
                 [0, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0],
                 [0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0],
                 [0, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1],
                 [0, 1, 0, 1, 1, 1, 1, 0]])  # 64QAM en el II quadrant
            bitmap64III = np.array(
                [[1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0],
                 [1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0],
                 [1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0],
                 [1, 1, 1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0],
                 [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0],
                 [1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0],
                 [1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 0, 1, 0],
                 [1, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0],
                 [1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0],
                 [1, 1, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0],
                 [1, 1, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0],
                 [1, 1, 0, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0],
                 [1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0],
                 [1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1, 1, 0],
                 [1, 1, 0, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0],
                 [1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1],
                 [1, 1, 0, 1, 1, 1, 1, 0]])  # 64QAM en el III quadrant
            bitmap64IV = np.array(
                [[1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0],
                 [1, 0, 1, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0],
                 [1, 0, 1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0],
                 [1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 0],
                 [1, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0],
                 [1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0, 0],
                 [1, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0],
                 [1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0],
                 [1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0],
                 [1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0],
                 [1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0],
                 [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0],
                 [1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0],
                 [1, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 0],
                 [1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0],
                 [1, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1],
                 [1, 0, 0, 1, 1, 1, 1, 0]])  # 64QAM en el IV quadrant
            bitmap = np.r_[bitmap64I, bitmap64II, bitmap64III, bitmap64IV]
            QAM16 = np.array(
                [-3 - 3 * 1j, -1 - 3 * 1j, 1 - 3 * 1j, 3 - 3 * 1j, 3 - 1j, 1 - 1j, -1 - 1j, -3 - 1j, -3 + 3 * 1j,
                 -1 + 3 * 1j, 1 + 3 * 1j, 3 + 3 * 1j, 3 + 1j, 1 + 1j, -1 + 1j, -3 + 1j], complex)
            QAM64 = np.r_[QAM16 + (4 + 4 * 1j), QAM16 + (-4 + 4 * 1j), QAM16 + (-4 - 4 * 1j), QAM16 + (4 - 4 * 1j)]
            mapped = np.sqrt(1. / 170.) * np.r_[
                QAM64 + (8 + 8 * 1j), QAM64 + (-8 + 8 * 1j), QAM64 + (-8 - 8 * 1j), QAM64 + (8 - 8 * 1j)]
            # power=sum(abs(mapped**2))/len(mapped) #has to be 1
            #     dibuixar_constelacions(mapped.real, mapped.imag)
            #    plt.show()
            # bittx2=bittx.reshape(len(bittx)/bn,bn)
        elif bn == 9:
            print('Modulation format not supported')
            exit()

        return mapped, bitmap


def Modulator(bittx, mapped, bitmap, bn):
    if bn == 0:
        Map = 0
    if bn == 1:
        Map = mapped[bittx].reshape(1, -1)
    elif bn > 1:
        Symbols = np.array(np.zeros(len(bittx)), int)
        for k in range(0, len(bitmap)):
            a = np.all((bittx - bitmap[k]) == 0,
                       axis=1)  # compare the data with the bitmap vector to create the symbols
            index = np.where(a == True)
            Symbols[index] = k
        Map = mapped[Symbols].reshape(1, -1)

    return Map


def Demod(signalrx, formatM, bitOriginal, bn):
    index = np.argmin(np.abs(signalrx.reshape(-1, 1) - formatM), axis=1)
    RxConst = formatM.reshape(-1, 1)[index]
    rxdata = bitOriginal[index]
    # rxdata.reshape(len(rxdata)*bn)
    if bn == 0:
        rxdata = 0
    if bn == 1:
        rxdata = rxdata.reshape(-1, 1)
    return rxdata


def dibuixar_psd(x, fs):
    # Plot the received optical spectrum
    freqs = np.fft.fftshift(np.arange(-x.size / 2, x.size / 2)) * fs / x.size
    plt.plot(freqs / 1e9, 20 * np.log10(np.abs(np.fft.fft(x))))
    plt.axis([-40, 40, -40, 70])
    plt.grid()


def dibuixar_constelacions(x, y):
    plt.scatter(x, y)


def plotallconstellations():
    Bertheobpsk = np.load('Bertheobpsk.npy')
    Bertheo4PAM = np.load('Bertheo4PAM.npy')
    Bertheo8PAM = np.load('Bertheo8PAM.npy')
    Bertheo16PAM = np.load('Bertheo16PAM.npy')
    Bertheo32PAM = np.load('Bertheo32PAM.npy')
    Bertheo4QAM = np.load('Bertheo4QAM.npy')
    Bertheo8QAM = np.load('Bertheo8QAM.npy')
    Bertheo16QAM = np.load('Bertheo16QAM.npy')
    Bertheo32QAM = np.load('Bertheo32QAM.npy')
    Bertheo64QAM = np.load('Bertheo64QAM.npy')
    Bertheo128QAM = np.load('Bertheo128QAM.npy')
    Bertheo256QAM = np.load('Bertheo256QAM.npy')

    Berbpsk = np.load('Berbpsk.npy')
    Ber4PAM = np.load('Ber4PAM.npy')
    Ber8PAM = np.load('Ber8PAM.npy')
    Ber16PAM = np.load('Ber16PAM.npy')
    Ber32PAM = np.load('Ber32PAM.npy')
    Ber4QAM = np.load('Ber4QAM.npy')
    Ber8QAM = np.load('Ber8QAM.npy')
    Ber16QAM = np.load('Ber16QAM.npy')
    Ber32QAM = np.load('Ber32QAM.npy')
    Ber64QAM = np.load('Ber64QAM.npy')
    Ber128QAM = np.load('Ber128QAM.npy')
    Ber256QAM = np.load('Ber256QAM.npy')

    SNRbpsk = np.load('SNRbpsk.npy')
    SNRlinbpsk = 10 ** (SNRbpsk / 10)
    EbN0linbpsk = SNRlinbpsk
    EbN0bpsk = 10 * np.log10(EbN0linbpsk)
    SNR4PAM = np.load('SNR4PAM.npy')
    SNRlin4PAM = 10 ** (SNR4PAM / 10)
    EbN0lin4PAM = SNRlin4PAM / 2
    EbN04PAM = 10 * np.log10(EbN0lin4PAM)
    SNR8PAM = np.load('SNR8PAM.npy')
    SNRlin8PAM = 10 ** (SNR8PAM / 10)
    EbN0lin8PAM = SNRlin8PAM / 3
    EbN08PAM = 10 * np.log10(EbN0lin8PAM)
    SNR16PAM = np.load('SNR16PAM.npy')
    SNRlin16PAM = 10 ** (SNR16PAM / 10)
    EbN0lin16PAM = SNRlin16PAM / 4
    EbN016PAM = 10 * np.log10(EbN0lin16PAM)
    SNR32PAM = np.load('SNR32PAM.npy')
    SNRlin32PAM = 10 ** (SNR32PAM / 10)
    EbN0lin32PAM = SNRlin32PAM / 5
    EbN032PAM = 10 * np.log10(EbN0lin32PAM)
    SNR4QAM = np.load('SNR4QAM.npy')
    SNRlin4QAM = 10 ** (SNR4QAM / 10)
    EbN0lin4QAM = SNRlin4QAM / 2
    EbN04QAM = 10 * np.log10(EbN0lin4QAM)
    SNR8QAM = np.load('SNR8QAM.npy')
    SNRlin8QAM = 10 ** (SNR8QAM / 10)
    EbN0lin8QAM = SNRlin8QAM / 3
    EbN08QAM = 10 * np.log10(EbN0lin8QAM)
    SNR16QAM = np.load('SNR16QAM.npy')
    SNRlin16QAM = 10 ** (SNR16QAM / 10)
    EbN0lin16QAM = SNRlin16QAM / 4
    EbN016QAM = 10 * np.log10(EbN0lin16QAM)
    SNR32QAM = np.load('SNR32QAM.npy')
    SNRlin32QAM = 10 ** (SNR32QAM / 10)
    EbN0lin32QAM = SNRlin32QAM / 5
    EbN032QAM = 10 * np.log10(EbN0lin32QAM)
    SNR64QAM = np.load('SNR64QAM.npy')
    SNRlin64QAM = 10 ** (SNR64QAM / 10)
    EbN0lin64QAM = SNRlin64QAM / 6
    EbN064QAM = 10 * np.log10(EbN0lin64QAM)
    SNR128QAM = np.load('SNR128QAM.npy')
    SNRlin128QAM = 10 ** (SNR128QAM / 10)
    EbN0lin128QAM = SNRlin128QAM / 7
    EbN0128QAM = 10 * np.log10(EbN0lin128QAM)
    SNR256QAM = np.load('SNR256QAM.npy')
    SNRlin256QAM = 10 ** (SNR256QAM / 10)
    EbN0lin256QAM = SNRlin256QAM / 8
    EbN0256QAM = 10 * np.log10(EbN0lin256QAM)
    # M-PAM
    plt.semilogy(EbN0bpsk, Berbpsk, EbN0bpsk, Bertheobpsk, EbN04PAM, Ber4PAM, EbN04PAM, Bertheo4PAM, EbN08PAM, Ber8PAM,
                 EbN08PAM, Bertheo8PAM, EbN016PAM, Ber16PAM, EbN016PAM, Bertheo16PAM, EbN032PAM, Ber32PAM, EbN032PAM,
                 Bertheo32PAM)
    plt.xlabel('Eb/No')
    plt.ylabel('BER')
    plt.grid()
    plt.legend(['BPSK', 'BPSKTheo', '4PAM', '4PAMTheo', '8PAM', '8PAMTheo', '16PAM', '16PAMTheo', '32PAM', '32PAMTheo'],
               'best')
    # M-QAM
    plt.figure()
    plt.semilogy(EbN04QAM, Ber4QAM, EbN04QAM, Bertheo4QAM, EbN08QAM, Ber8QAM, EbN08QAM, Bertheo8QAM, EbN016QAM,
                 Ber16QAM, EbN016QAM, Bertheo16QAM, EbN032QAM, Ber32QAM, EbN032QAM, Bertheo32QAM, EbN064QAM, Ber64QAM,
                 EbN064QAM, Bertheo64QAM, EbN0128QAM, Ber128QAM, EbN0128QAM, Bertheo128QAM, EbN0256QAM, Ber256QAM,
                 EbN0256QAM, Bertheo256QAM)
    plt.legend(
        ['4QAM', '4QAMTheo', '8QAM', '8QAMTheo', '16QAM', '16QAMTheo', '32QAM', '32QAMTheo', '64QAM', '64QAMTheo',
         '128QAM', '128QAMTheo', '256QAM', '256QAMTheo'], 'best')
    plt.grid()
    plt.show()


class test:
    def bertest(self, datarx, datatx):
        difference = datatx - datarx
        Nerr = np.sum(np.sqrt(difference.real ** 2 + difference.imag ** 2))
        return np.true_divide(Nerr, datatx.size)

    def test(self):
        np.random.seed(42)
        constellation = "QAM"
        bn = 3

        if constellation == "PAM":
            if bn == 1:
                bittx = np.random.randint(0, 2, 80000)
                SNR = np.arange(1, 10, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = .5 * spec.erfc(np.sqrt(SNRlin))
            if bn == 2:
                bittx = np.random.randint(0, 2, 32 * 1024)
                SNR = np.arange(3, 18, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (3. / 8.) * spec.erfc(np.sqrt((2. / 5.) * EbN0lin))
            elif bn == 3:
                bittx = np.random.randint(0, 2, 3 * 32 * 1024)
                SNR = np.arange(6, 23, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1. / 3.) * (7. / 8.) * spec.erfc(np.sqrt((1. / 7.) * EbN0lin))
            elif bn == 4:
                bittx = np.random.randint(0, 2, 4 * 64 * 1024)
                SNR = np.arange(10, 30, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1. / 4.) * (15. / 16.) * spec.erfc(np.sqrt((12. / 255.) * EbN0lin))
            elif bn == 5:
                bittx = np.random.randint(0, 2, 5 * 128 * 1024)
                SNR = np.arange(16, 35, .1)
                SNRlin = 10 ** (SNR / 10)
                bn = 5
                EbN0lin = SNRlin / bn
                BERtheo = (1. / 5.) * (31. / 32.) * spec.erfc(np.sqrt((15. / 1023.) * EbN0lin))
        elif constellation == "QAM":
            if bn == 1:
                bittx = np.random.randint(0, 2, 80000)
                SNR = np.arange(1, 10, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = .5 * spec.erfc(np.sqrt(SNRlin))
            elif bn == 2:
                bittx = np.random.randint(0, 2, 32 * 1024)
                SNR = np.arange(3, 13, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = .5 * spec.erfc(np.sqrt(EbN0lin))
            elif bn == 3:
                bittx = np.random.randint(0, 2, 3 * 32 * 1024)
                SNR = np.arange(5, 17, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1. / 3.) * spec.erfc(1.136174 * np.sqrt((1. / 2.) * EbN0lin)) + (1. / 2.) * spec.erfc(
                    1.309307 * np.sqrt((1. / 2.) * EbN0lin))  # circular 8QAM
                # BERtheo=(1-1./np.sqrt(8.))*(1/np.log2(np.sqrt(8)))*spec.erfc(np.sqrt((9./14.)*EbN0lin))
                # #rectangular 8QAM
            elif bn == 4:
                bittx = np.random.randint(0, 2, 2 * 32 * 1024)
                SNR = np.arange(6, 21, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1 - 1. / np.sqrt(16)) * .5 * spec.erfc(np.sqrt((2. / 5.) * EbN0lin))
            elif bn == 5:
                bittx = np.random.randint(0, 2, 5 * 64 * 1024)
                SNR = np.arange(10, 24, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1 - 1. / np.sqrt(32.)) * (1 / np.log2(np.sqrt(32))) * spec.erfc(
                    np.sqrt((15. / 62.) * EbN0lin))
            elif bn == 6:
                bittx = np.random.randint(0, 2, 6 * 64 * 1024)
                SNR = np.arange(12, 26, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1 - 1. / np.sqrt(64.)) * (1 / 3.) * spec.erfc(np.sqrt((1. / 7.) * EbN0lin))
            elif bn == 7:
                bittx = np.random.randint(0, 2, 7 * 128 * 1024)
                SNR = np.arange(14, 30, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1 - 1. / np.sqrt(128.)) * (1 / np.log2(np.sqrt(128))) * spec.erfc(
                    np.sqrt((21. / 254.) * EbN0lin))
            elif bn == 8:
                bittx = np.random.randint(0, 2, 8 * 128 * 1024)
                SNR = np.arange(16, 32, .1)
                SNRlin = 10 ** (SNR / 10)
                EbN0lin = SNRlin / bn
                BERtheo = (1 - 1. / np.sqrt(256.)) * (1 / 4.) * spec.erfc(np.sqrt((12. / 255.) * EbN0lin))
        #        else:
        #            print "Modulation format not supported"#def Demod(signalrx,formatM,bitOriginal,bn):
        #               index=np.argmin(np.abs(signalrx.reshape(-1,1).real-formatM),axis=1)
        #               RxConst=formatM.reshape(-1,1)[index]
        #               rxdata=bitOriginal[index]
        #               return rxdata.reshape(len(rxdata)*bn),RxConst.reshape(-1,1)
        #               exit()
        #
        EbN0 = 10 * np.log10(EbN0lin)
        BER = np.empty(SNR.size)
        (datatx, formatM, bitOriginal) = Modulator(bittx, constellation, bn)
        noisebase = np.random.randn(datatx.size) + 1j * np.random.randn(datatx.size)
        noisebasepower = np.mean(noisebase.real ** 2 + noisebase.imag ** 2)
        power = np.mean(datatx.real ** 2 + datatx.imag ** 2)
        for k in xrange(SNR.size):  # TODO numpy or scipy
            gain = power / (SNRlin[k] * noisebasepower)
            signalrx = datatx + np.sqrt(gain) * noisebase
            (bitrx, RxConst) = Demod(signalrx, formatM, bitOriginal, bn)
            BER[k] = self.bertest(bitrx, bittx)

        #        np.save('Bertheo8QAM', BERtheo)
        #        np.save('BER8QAM', BER)
        #        np.save('SNR8QAM', SNR)
        plt.semilogy(EbN0, BER, EbN0, BERtheo)
        plt.xlabel('EbN0')
        plt.ylabel('BER')
        plt.legend(['Simulation', 'Theoretical'], 'best')
        plt.figure()
        dibuixar_constelacions(np.real(RxConst), np.imag(RxConst))
        plt.show()
